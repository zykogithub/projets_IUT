SET SERVEROUTPUT ON;

--CREATE TABLE LOG (
--    IDLOG NUMBER(6) PRIMARY KEY NOT NULL,
    --IDAUTEUR VARCHAR2(50),
  --  ACTION VARCHAR2(4000),
   -- DATEHEUREACTION DATE,
   -- LIGNEAVANT VARCHAR2(4000),
   -- LIGNEAPRES VARCHAR2(4000)
--);

--DROP TABLE log;



CREATE OR REPLACE TRIGGER TRIGGERATHLETE 
BEFORE UPDATE OR DELETE ON ATHLETE 
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.NOMATHLETE != :NEW.NOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOMATHLETE, :NEW.NOMATHLETE);
        ELSIF :OLD.PRENOMATHLETE != :NEW.PRENOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.PRENOMATHLETE, :NEW.PRENOMATHLETE);
        ELSIF :OLD.SURNOM != :NEW.SURNOM THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.SURNOM, :NEW.SURNOM);
        ELSIF :OLD.GENRE != :NEW.GENRE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.GENRE, :NEW.GENRE);
        ELSIF :OLD.DATENAISSANCE != :NEW.DATENAISSANCE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.DATENAISSANCE, :NEW.DATENAISSANCE);
        ELSIF :OLD.DATEDECES != :NEW.DATEDECES THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.DATEDECES, :NEW.DATEDECES);
        ELSIF :OLD.TAILLE != :NEW.TAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.TAILLE, :NEW.TAILLE);
        ELSIF :OLD.POIDS != :NEW.POIDS THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.POIDS, :NEW.POIDS);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.NOMATHLETE != :NEW.NOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.NOMATHLETE, :NEW.NOMATHLETE);
        ELSIF :OLD.PRENOMATHLETE != :NEW.PRENOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.PRENOMATHLETE, :NEW.PRENOMATHLETE);
        ELSIF :OLD.SURNOM != :NEW.SURNOM THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.SURNOM, :NEW.SURNOM);
        ELSIF :OLD.GENRE != :NEW.GENRE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.GENRE, :NEW.GENRE);
        ELSIF :OLD.DATENAISSANCE != :NEW.DATENAISSANCE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.DATENAISSANCE, :NEW.DATENAISSANCE);
        ELSIF :OLD.DATEDECES != :NEW.DATEDECES THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.DATEDECES, :NEW.DATEDECES);
        ELSIF :OLD.TAILLE != :NEW.TAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.TAILLE, :NEW.TAILLE);
        ELSIF :OLD.POIDS != :NEW.POIDS THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.POIDS, :NEW.POIDS);
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERCOMPOSITIONEQUIPE
BEFORE UPDATE OR DELETE ON COMPOSITION_EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
    END IF;
    
END;
/
CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.NOMEQUIPE != :NEW.NOMEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOMEQUIPE, :NEW.NOMEQUIPE);
        ELSIF :OLD.NOC != :NEW.NOC THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOC, :NEW.NOC);
        END IF;
    ELSIF DELETING THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        
    END IF;

END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONEQUIPE
BEFORE UPDATE OR DELETE ON PARTICIPATION_EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;
    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONINDIVIDUEL
BEFORE UPDATE OR DELETE ON PARTICIPATION_INDIVIDUELLE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.IDEVENT != :NEW.IDEVENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEVENT, :NEW.IDEVENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
        ELSIF :OLD.NOC != :NEW.NOC THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOC, :NEW.NOC);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
        ELSIF :OLD.NOC != :NEW.NOC THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.NOC, :NEW.NOC);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATHLETE
BEFORE UPDATE OR DELETE ON ATHLETE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.NOMATHLETE != :NEW.NOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOMATHLETE, :NEW.NOMATHLETE);
        ELSIF :OLD.PRENOMATHLETE != :NEW.PRENOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.PRENOMATHLETE, :NEW.PRENOMATHLETE);
        ELSIF :OLD.SURNOM != :NEW.SURNOM THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.SURNOM, :NEW.SURNOM);
        ELSIF :OLD.GENRE != :NEW.GENRE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.GENRE, :NEW.GENRE);
        ELSIF :OLD.DATENAISSANCE != :NEW.DATENAISSANCEM THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.DATENAISSANCE, :NEW.SURNOM);
        ELSIF :OLD.DATEDECES != :NEW.DATEDECES THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.DATEDECES, :NEW.DATEDECES);
        ELSIF :OLD.TAILLE != :NEW.TAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.TAILLE, :NEW.TAILLE);
        ELSIF :OLD.POIDS != :NEW.POIDS THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.POIDS, :NEW.POIDS);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.NOMATHLETE != :NEW.NOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.NOMATHLETE, :NEW.NOMATHLETE);
        ELSIF :OLD.PRENOMATHLETE != :NEW.PRENOMATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.PRENOMATHLETE, :NEW.PRENOMATHLETE);
        ELSIF :OLD.SURNOM != :NEW.SURNOM THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.SURNOM, :NEW.SURNOM);
        ELSIF :OLD.GENRE != :NEW.GENRE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.GENRE, :NEW.GENRE);
        ELSIF :OLD.DATENAISSANCE != :NEW.DATENAISSANCEM THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.DATENAISSANCE, :NEW.SURNOM);
        ELSIF :OLD.DATEDECES != :NEW.DATEDECES THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.DATEDECES, :NEW.DATEDECES);
        ELSIF :OLD.TAILLE != :NEW.TAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.TAILLE, :NEW.TAILLE);
        ELSIF :OLD.POIDS != :NEW.POIDS THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.POIDS, :NEW.POIDS);

    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGEREVENEMENT
BEFORE UPDATE OR DELETE ON EVENEMENT
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.NOMEVENEMENT != :NEW.NOMEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOMEVENEMENT, :NEW.NOMEVENEMENT);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.STATUTEVENEMENT != :NEW.STATUTEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.STATUTEVENEMENT, :NEW.STATUTEVENEMENT);
        ELSIF :OLD.CODEDISCIPLINE != :NEW.CODEDISCIPLINE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.CODEDISCIPLINE, :NEW.CODEDISCIPLINE);
        ELSIF :OLD.IDHOTE != :NEW.IDHOTE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDHOTE, :NEW.IDHOTE);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.NOMEVENEMENT != :NEW.NOMEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.NOMEVENEMENT, :NEW.NOMEVENEMENT);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.STATUTEVENEMENT != :NEW.STATUTEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.STATUTEVENEMENT, :NEW.STATUTEVENEMENT);
        ELSIF :OLD.CODEDISCIPLINE != :NEW.CODEDISCIPLINE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.CODEDISCIPLINE, :NEW.CODEDISCIPLINE);
        ELSIF :OLD.IDHOTE != :NEW.IDHOTE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDHOTE, :NEW.IDHOTE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGERSPORT
BEFORE UPDATE OR DELETE ON SPORT
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.CODESPORT != :NEW.CODESPORT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.CODESPORT, :NEW.CODESPORT);
        ELSIF :OLD.NOMSPORT != :NEW.NOMSPORT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.NOMSPORT, :NEW.NOMSPORT);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.CODESPORT, :OLD.CODESPORT);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONEQUIPE
BEFORE UPDATE OR DELETE ON PARTICIPATION_EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONEQUIPE
BEFORE UPDATE OR DELETE ON PARTICIPATION_EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONEQUIPE
BEFORE UPDATE OR DELETE ON PARTICIPATION_EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.MEDAILLE, :NEW.MEDAILLE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
DECLARE
    new_idlog NUMBER;
BEGIN
    -- Calculer le nouvel IDLOG
    SELECT MAX(IDLOG) + 1 INTO new_idlog FROM LOG;

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG VALUES (new_idlog, USER, 'Updating', SYSDATE, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG VALUES (new_idlog, USER, 'Deleting', SYSDATE, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    END IF;
END;
/


