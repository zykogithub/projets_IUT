SET SERVEROUTPUT ON;

CREATE TABLE LOG (
    numlog NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    idAuteur VARCHAR2(150) NOT NULL,
    action VARCHAR2(150) NOT NULL,
    dateHeureAction TIMESTAMP(6), 
    ligneAvant CLOB,
    ligneApres CLOB
);

DROP TABLE log;



CREATE OR REPLACE TRIGGER TRIGGERATHLETE 
BEFORE UPDATE OR DELETE OR INSERT ON ATHLETE 
FOR EACH ROW
BEGIN
    IF UPDATING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.NOMATHLETE != :NEW.NOMATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOMATHLETE, :NEW.NOMATHLETE);
        ELSIF :OLD.PRENOMATHLETE != :NEW.PRENOMATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.PRENOMATHLETE, :NEW.PRENOMATHLETE);
        ELSIF :OLD.SURNOM != :NEW.SURNOM THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.SURNOM, :NEW.SURNOM);
        ELSIF :OLD.GENRE != :NEW.GENRE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.GENRE, :NEW.GENRE);
        ELSIF :OLD.DATENAISSANCE != :NEW.DATENAISSANCE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.DATENAISSANCE, :NEW.DATENAISSANCE);
        ELSIF :OLD.DATEDECES != :NEW.DATEDECES THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.DATEDECES, :NEW.DATEDECES);
        ELSIF :OLD.TAILLE != :NEW.TAILLE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.TAILLE, :NEW.TAILLE);
        ELSIF :OLD.POIDS != :NEW.POIDS THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
            VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.POIDS, :NEW.POIDS);
        END IF;
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDATHLETE, NULL);
    END IF;    
END;
/
CREATE OR REPLACE TRIGGER TRIGGERCOMPOSITIONEQUIPE
BEFORE UPDATE OR DELETE ON COMPOSITION_EQUIPE
FOR EACH ROW
BEGIN
  
    IF UPDATING THEN
        IF :old.IDEQUIPE!=:new.IDEQUIPE THEN
            INSERT INTO LOG VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Inserting', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
    END IF;
    
END;
/
CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW
BEGIN
    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.NOMEQUIPE != :NEW.NOMEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOMEQUIPE, :NEW.NOMEQUIPE);
        ELSIF :OLD.NOC != :NEW.NOC THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOC, :NEW.NOC);
        END IF;
    ELSIF DELETING THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDEQUIPE);    
    END IF;

END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONEQUIPE
BEFORE UPDATE OR DELETE ON PARTICIPATION_EQUIPE
FOR EACH ROW

BEGIN
    
    
    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.MEDAILLE, :NEW.MEDAILLE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDEQUIPE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERPARTICIPATIONINDIVIDUEL
BEFORE UPDATE OR DELETE ON PARTICIPATION_INDIVIDUELLE
FOR EACH ROW
BEGIN
    IF UPDATING THEN
        IF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        ELSIF :OLD.IDEVENT != :NEW.IDEVENT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEVENT, :NEW.IDEVENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.MEDAILLE, :NEW.MEDAILLE);
        ELSIF :OLD.NOC != :NEW.NOC THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOC, :NEW.NOC);
        END IF;
    ELSIF DELETING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.RESULTAT != :NEW.RESULTAT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.RESULTAT, :NEW.RESULTAT);
        ELSIF :OLD.MEDAILLE != :NEW.MEDAILLE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.MEDAILLE, :NEW.MEDAILLE);
        ELSIF :OLD.NOC != :NEW.NOC THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.NOC, :NEW.NOC);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRIGGERHOTE
BEFORE UPDATE OR DELETE ON HOTE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDHOTE != :NEW.IDHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDHOTE, :NEW.IDHOTE);
        ELSIF :OLD.NUMEROHOTE != :NEW.NUMEROHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NUMEROHOTE, :NEW.NUMEROHOTE);
        ELSIF :OLD.LIBELLEHOTE != :NEW.LIBELLEHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.LIBELLEHOTE, :NEW.LIBELLEHOTE);
        ELSIF :OLD.ANNEEHOTE != :NEW.ANNEEHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.ANNEEHOTE, :NEW.ANNEEHOTE);
        ELSIF :OLD.SAISON != :NEW.SAISON THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.SAISON, :NEW.SAISON);
        ELSIF :OLD.SAISON != :NEW.SAISON THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.SAISON, :NEW.SAISON);
        ELSIF :OLD.VILLEHOTE != :NEW.VILLEHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.VILLEHOTE, :NEW.VILLEHOTE);
        ELSIF :OLD.CODENOCHOTE != :NEW.CODENOCHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODENOCHOTE, :NEW.CODENOCHOTE);
        ELSIF :OLD.DATEOUVERTURE != :NEW.DATEOUVERTURE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.DATEOUVERTURE, :NEW.DATEOUVERTURE);
        ELSIF :OLD.DATEFERMETURE != :NEW.DATEFERMETURE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.DATEFERMETURE, :NEW.DATEFERMETURE);
        ELSIF :OLD.DATECOMPETITION != :NEW.DATECOMPETITION THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.DATECOMPETITION, :NEW.DATECOMPETITION);
        ELSIF :OLD.NOTES != :NEW.NOTES THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOTES, :NEW.NOTES);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDHOTE, NULL);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDHOTE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERNOC
BEFORE UPDATE OR DELETE ON NOC
FOR EACH ROW

BEGIN
    IF UPDATING THEN
        IF :OLD.CODENOC != :NEW.CODENOC THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODENOC, :NEW.CODENOC);
        ELSIF :OLD.NOM != :NEW.NOM THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOM, :NEW.NOM);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.CODENOC, NULL);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.CODENOC);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGERDISCIPLINE
BEFORE UPDATE OR DELETE ON DISCIPLINE   
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.CODEDISCIPLINE != :NEW.CODEDISCIPLINE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODEDISCIPLINE, :NEW.CODEDISCIPLINE);
        ELSIF :OLD.NOMDISCIPLINE != :NEW.NOMDISCIPLINE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOMDISCIPLINE, :NEW.NOMDISCIPLINE);
        ELSIF :OLD.CODESPORT != :NEW.CODESPORT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODESPORT, :NEW.CODESPORT);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.CODEDISCIPLINE, NULL);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.CODEDISCIPLINE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/
CREATE OR REPLACE TRIGGER TRIGGEREVENEMENT
BEFORE UPDATE OR DELETE ON EVENEMENT
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.NOMEVENEMENT != :NEW.NOMEVENEMENT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOMEVENEMENT, :NEW.NOMEVENEMENT);
        ELSIF :OLD.IDEVENEMENT != :NEW.IDEVENEMENT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
        ELSIF :OLD.STATUTEVENEMENT != :NEW.STATUTEVENEMENT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.STATUTEVENEMENT, :NEW.STATUTEVENEMENT);
        ELSIF :OLD.CODEDISCIPLINE != :NEW.CODEDISCIPLINE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODEDISCIPLINE, :NEW.CODEDISCIPLINE);
        ELSIF :OLD.IDHOTE != :NEW.IDHOTE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDHOTE, :NEW.IDHOTE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEVENEMENT, :NEW.IDEVENEMENT);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDEVENEMENT);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGERSPORT
BEFORE UPDATE OR DELETE ON SPORT
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.CODESPORT != :NEW.CODESPORT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODESPORT, :NEW.CODESPORT);
        ELSIF :OLD.NOMSPORT != :NEW.NOMSPORT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOMSPORT, :NEW.NOMSPORT);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.CODESPORT, :OLD.CODESPORT);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/CREATE OR REPLACE TRIGGER TRIGGEREQUIPE
BEFORE UPDATE OR DELETE ON EQUIPE
FOR EACH ROW

BEGIN
    
    

    IF UPDATING THEN
        IF :OLD.IDEQUIPE != :NEW.IDEQUIPE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDEQUIPE, :NEW.IDEQUIPE);
        ELSIF :OLD.IDATHLETE != :NEW.IDATHLETE THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.IDATHLETE, :NEW.IDATHLETE);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.IDEQUIPE, :OLD.IDATHLETE);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.IDATHLETE);
    END IF;
END;
/

CREATE OR REPLACE TRIGGER TRIGGERSPORT
BEFORE UPDATE OR DELETE ON SPORT
FOR EACH ROW

BEGIN
    IF UPDATING THEN
        IF :OLD.CODESPORT != :NEW.CODESPORT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.CODESPORT, :NEW.CODESPORT);
        ELSIF :OLD.NOMSPORT != :NEW.NOMSPORT THEN
            INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Updating', SYSTIMESTAMP, :OLD.NOMSPORT, :NEW.NOMSPORT);
        END IF;
    ELSIF DELETING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) VALUES (USER, 'Deleting', SYSTIMESTAMP, :OLD.CODENOC, NULL);
    ELSIF INSERTING THEN
        INSERT INTO LOG (idAuteur, action, dateHeureAction, ligneAvant, ligneApres) 
        VALUES (USER, 'Inserting', SYSTIMESTAMP, NULL, :NEW.CODENOC);
    END IF;
END;
